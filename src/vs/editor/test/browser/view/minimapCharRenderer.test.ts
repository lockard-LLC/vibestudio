/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/

import assert from 'assert';
import { ensureNoDisposablesAreLeakedInTestSuite } from '../../../../base/test/common/utils.js';
import { MinimapCharRendererFactory } from '../../../browser/viewParts/minimap/minimapCharRendererFactory.js';
import { Constants } from '../../../browser/viewParts/minimap/minimapCharSheet.js';
import { RGBA8 } from '../../../common/core/misc/rgba.js';

suite('MinimapCharRenderer', () => {
  ensureNoDisposablesAreLeakedInTestSuite();

  const sampleD = [
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0xd0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xd0, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xd0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x0d, 0xff, 0xff, 0xff, 0xa3,
    0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 0xe5, 0xff, 0xff, 0xff, 0x5e,
    0xff, 0xff, 0xff, 0xd0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xa4,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf7,
    0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x10,
    0xff, 0xff, 0xff, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x94,
    0xff, 0xff, 0xff, 0x02, 0xff, 0xff, 0xff, 0x6a, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x3b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x22, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x03,
    0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x47, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x06, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xd6, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x31,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x16,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xe7,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x0e, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x69, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x3d,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0x9b,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xff, 0xff, 0xff, 0xb9,
    0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 0xf7, 0xff, 0xff, 0xff, 0xff,
    0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0xff, 0xff, 0xff, 0x0e, 0xff, 0xff, 0xff, 0xa7, 0xff, 0xff, 0xff, 0xf5,
    0xff, 0xff, 0xff, 0xe8, 0xff, 0xff, 0xff, 0x71, 0xff, 0xff, 0xff, 0xd0,
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x78, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00,
  ];

  function getSampleData() {
    const charCode = 'd'.charCodeAt(0);
    const result = new Uint8ClampedArray(
      Constants.SAMPLED_CHAR_HEIGHT *
        Constants.SAMPLED_CHAR_WIDTH *
        Constants.RGBA_CHANNELS_CNT *
        Constants.CHAR_COUNT
    );
    for (let i = 0; i < result.length; i++) {
      result[i] = 0;
    }

    const rowWidth =
      Constants.SAMPLED_CHAR_WIDTH *
      Constants.RGBA_CHANNELS_CNT *
      Constants.CHAR_COUNT;
    const chIndex = charCode - Constants.START_CH_CODE;

    let globalOutputOffset =
      chIndex * Constants.SAMPLED_CHAR_WIDTH * Constants.RGBA_CHANNELS_CNT;
    let inputOffset = 0;
    for (let i = 0; i < Constants.SAMPLED_CHAR_HEIGHT; i++) {
      let outputOffset = globalOutputOffset;
      for (let j = 0; j < Constants.SAMPLED_CHAR_WIDTH; j++) {
        for (
          let channel = 0;
          channel < Constants.RGBA_CHANNELS_CNT;
          channel++
        ) {
          result[outputOffset] = sampleD[inputOffset];
          inputOffset++;
          outputOffset++;
        }
      }
      globalOutputOffset += rowWidth;
    }

    return result;
  }

  function createFakeImageData(width: number, height: number): ImageData {
    return {
      colorSpace: 'srgb',
      width: width,
      height: height,
      data: new Uint8ClampedArray(width * height * Constants.RGBA_CHANNELS_CNT),
    };
  }

  test('letter d @ 2x', () => {
    const sampleData = getSampleData();
    const renderer = MinimapCharRendererFactory.createFromSampleData(
      sampleData,
      2
    );

    const background = new RGBA8(0, 0, 0, 255);
    const color = new RGBA8(255, 255, 255, 255);
    const imageData = createFakeImageData(
      Constants.BASE_CHAR_WIDTH * 2,
      Constants.BASE_CHAR_HEIGHT * 2
    );
    // set the background color
    for (let i = 0, len = imageData.data.length / 4; i < len; i++) {
      imageData.data[4 * i + 0] = background.r;
      imageData.data[4 * i + 1] = background.g;
      imageData.data[4 * i + 2] = background.b;
      imageData.data[4 * i + 3] = 255;
    }
    renderer.renderChar(
      imageData,
      0,
      0,
      'd'.charCodeAt(0),
      color,
      255,
      background,
      255,
      2,
      false,
      false
    );

    const actual: number[] = [];
    for (let i = 0; i < imageData.data.length; i++) {
      actual[i] = imageData.data[i];
    }

    assert.deepStrictEqual(
      actual,
      [
        0x2d, 0x2d, 0x2d, 0xff, 0xac, 0xac, 0xac, 0xff, 0xc6, 0xc6, 0xc6, 0xff,
        0xc8, 0xc8, 0xc8, 0xff, 0xc0, 0xc0, 0xc0, 0xff, 0xcb, 0xcb, 0xcb, 0xff,
        0x00, 0x00, 0x00, 0xff, 0x00, 0x00, 0x00, 0xff,
      ]
    );
  });

  test('letter d @ 1x', () => {
    const sampleData = getSampleData();
    const renderer = MinimapCharRendererFactory.createFromSampleData(
      sampleData,
      1
    );

    const background = new RGBA8(0, 0, 0, 255);
    const color = new RGBA8(255, 255, 255, 255);
    const imageData = createFakeImageData(
      Constants.BASE_CHAR_WIDTH,
      Constants.BASE_CHAR_HEIGHT
    );
    // set the background color
    for (let i = 0, len = imageData.data.length / 4; i < len; i++) {
      imageData.data[4 * i + 0] = background.r;
      imageData.data[4 * i + 1] = background.g;
      imageData.data[4 * i + 2] = background.b;
      imageData.data[4 * i + 3] = 255;
    }

    renderer.renderChar(
      imageData,
      0,
      0,
      'd'.charCodeAt(0),
      color,
      255,
      background,
      255,
      1,
      false,
      false
    );

    const actual: number[] = [];
    for (let i = 0; i < imageData.data.length; i++) {
      actual[i] = imageData.data[i];
    }

    assert.deepStrictEqual(
      actual,
      [0xcb, 0xcb, 0xcb, 0xff, 0x81, 0x81, 0x81, 0xff]
    );
  });
});
