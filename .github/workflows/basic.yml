name: Basic checks

on:
  workflow_dispatch
permissions: {}

jobs:
  main:
    if: github.ref != 'refs/heads/main'
    name: Compilation, Unit and Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Compute cache key (hash package-lock.json)
        id: cacheKey
        run: |
          echo "value=${{ runner.os }}-node-mod-$(sha256sum package-lock.json | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ steps.cacheKey.outputs.value }}
          # allow restore if lockfile changes slightly
          restore-keys: |
            ${{ runner.os }}-node-mod-

      - name: Get npm cache path
        id: npmCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm cache
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.npmCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: npm ci

      - name: Compile and Download
        run: npm exec -- npm-run-all -lp compile "electron x64"

      - name: Run Unit Tests
        id: electron-unit-tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" ./scripts/test.sh

      - name: Run Integration Tests (Electron)
        id: electron-integration-tests
        run: xvfb-run --auto-servernum --server-args="-screen 0 1920x1080x24" ./scripts/test-integration.sh

  hygiene:
    if: github.ref != 'refs/heads/main'
    name: Hygiene and Layering
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Compute cache key (hash package-lock.json)
        id: cacheKey
        run: |
          echo "value=${{ runner.os }}-node-mod-$(sha256sum package-lock.json | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ steps.cacheKey.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-node-mod-

      - name: Get npm cache path
        id: npmCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm cache
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.npmCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: npm ci

      - name: Run Hygiene Checks
        run: npm run gulp hygiene

      - name: Run Valid Layers Checks
        run: npm run valid-layers-check

      - name: Run Define Class Fields Checks
        run: npm run define-class-fields-check

      - name: Compile /build/
        run: npm run compile
        working-directory: build

      - name: Check clean git state
        run: ./.github/workflows/check-clean-git-state.sh

      - name: Run ESLint
        run: npm run eslint

      - name: Run VSCode DTS Compile Checks
        run: npm run vscode-dts-compile-check

      - name: Run Trusted Types Checks
        run: npm run tsec-compile-check

  warm-cache:
    name: Warm up node modules cache
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: false

      - uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc

      - name: Compute cache key (hash package-lock.json)
        id: cacheKey
        run: |
          echo "value=${{ runner.os }}-node-mod-$(sha256sum package-lock.json | cut -d ' ' -f1)" >> $GITHUB_OUTPUT

      - name: Cache node_modules
        id: cacheNodeModules
        uses: actions/cache@v4
        with:
          path: "**/node_modules"
          key: ${{ steps.cacheKey.outputs.value }}
          restore-keys: |
            ${{ runner.os }}-node-mod-

      - name: Get npm cache path
        id: npmCacheDirPath
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

      - name: Cache npm cache
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        uses: actions/cache@v4
        with:
          path: ${{ steps.npmCacheDirPath.outputs.dir }}
          key: ${{ runner.os }}-npm-cache-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-cache-

      - name: Install dependencies
        if: ${{ steps.cacheNodeModules.outputs.cache-hit != 'true' }}
        env:
          PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
          ELECTRON_SKIP_BINARY_DOWNLOAD: 1
        run: npm ci
